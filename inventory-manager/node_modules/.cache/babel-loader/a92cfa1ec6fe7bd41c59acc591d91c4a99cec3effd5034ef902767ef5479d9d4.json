{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ChadPearson\\\\Documents\\\\Development\\\\projects\\\\G2Inventory\\\\inventory-manager\\\\src\\\\components\\\\ScanItem.js\",\n  _s = $RefreshSig$();\nimport { Row } from 'react-bootstrap';\nimport { useState, useEffect, useRef } from \"react\";\nimport \"../css/ScanItem.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ItemResults from './ItemResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ScanItem = () => {\n  _s();\n  const scannerValue = useRef(); //Scanner value object for reference\n  scannerValue.current = \"\";\n  const [scan, setScan] = useState();\n  useEffect(() => {\n    const handleKeydown = e => {\n      //Scanner must be set as keyboard emulator \n      //On scan, last event value passed is \"Enter\" key press\n      if (e.key !== \"Shift\") {\n        //Ignore a \"shift\" key press as the correctly capitalized letter is sent anyway\n        if (e.key !== \"Enter\") {\n          //If \"Enter\" hasn't been reached (last key press sent by scanner), add the charactor to the scannerValue object's \"current\" attribute\n          scannerValue.current += e.key;\n        } else {\n          //Got to enter set the \"scan\" state\n          setScan(scannerValue.current);\n          //reset the scannerValue object's \"current\" attribute to an empty string\n          scannerValue.current = \"\";\n          e.target.value = \"\";\n        }\n      }\n    };\n    window.addEventListener(\"keydown\", handleKeydown);\n    return () => {\n      window.removeEventListener(\"keydown\", handleKeydown);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: [\"Scan Inventory Item or enter item barcode here and press the \", \"<Enter>\", \" key: \", /*#__PURE__*/_jsxDEV(\"input\", {\n          id: \"scannedItem\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 94\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ItemResults, {\n      value: scan\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(ScanItem, \"mXAQrmlw+VKXnfpRUiV5/T5cIgg=\");\n_c = ScanItem;\nexport default ScanItem;\nvar _c;\n$RefreshReg$(_c, \"ScanItem\");","map":{"version":3,"names":["Row","useState","useEffect","useRef","ItemResults","jsxDEV","_jsxDEV","Fragment","_Fragment","ScanItem","_s","scannerValue","current","scan","setScan","handleKeydown","e","key","target","value","window","addEventListener","removeEventListener","children","id","type","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ChadPearson/Documents/Development/projects/G2Inventory/inventory-manager/src/components/ScanItem.js"],"sourcesContent":["import {Row} from 'react-bootstrap';\r\nimport {useState, useEffect, useRef} from \"react\";\r\nimport \"../css/ScanItem.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport ItemResults from './ItemResults';\r\n\r\nconst ScanItem = () => {\r\n    const scannerValue = useRef(); //Scanner value object for reference\r\n    scannerValue.current = \"\";\r\n\r\n    const [scan,setScan] = useState();\r\n    \r\n    useEffect(() => {\r\n      const handleKeydown = (e) => {\r\n        //Scanner must be set as keyboard emulator \r\n        //On scan, last event value passed is \"Enter\" key press\r\n        if(e.key !== \"Shift\"){        //Ignore a \"shift\" key press as the correctly capitalized letter is sent anyway\r\n          if(e.key !== \"Enter\"){      \r\n            //If \"Enter\" hasn't been reached (last key press sent by scanner), add the charactor to the scannerValue object's \"current\" attribute\r\n            scannerValue.current += e.key;\r\n          \r\n          }else{\r\n            //Got to enter set the \"scan\" state\r\n            setScan(scannerValue.current);\r\n           //reset the scannerValue object's \"current\" attribute to an empty string\r\n            scannerValue.current = \"\";\r\n            e.target.value = \"\";\r\n          }\r\n          \r\n        }\r\n        \r\n      };\r\n  \r\n      window.addEventListener(\"keydown\", handleKeydown);\r\n      return () => {\r\n        window.removeEventListener(\"keydown\", handleKeydown);\r\n      };\r\n    }, []);\r\n\r\n  return (\r\n    \r\n    <>   \r\n      <Row><h5>Scan Inventory Item or enter item barcode here and press the {\"<Enter>\"} key: <input id='scannedItem' type=\"text\" \r\n       /></h5></Row>\r\n\r\n        <ItemResults value={scan}/>\r\n    </>\r\n  );\r\n};\r\nexport default ScanItem;"],"mappings":";;AAAA,SAAQA,GAAG,QAAO,iBAAiB;AACnC,SAAQC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAO,OAAO;AACjD,OAAO,qBAAqB;AAC5B,OAAO,sCAAsC;AAC7C,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAExC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,YAAY,GAAGR,MAAM,CAAC,CAAC,CAAC,CAAC;EAC/BQ,YAAY,CAACC,OAAO,GAAG,EAAE;EAEzB,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAAGb,QAAQ,CAAC,CAAC;EAEjCC,SAAS,CAAC,MAAM;IACd,MAAMa,aAAa,GAAIC,CAAC,IAAK;MAC3B;MACA;MACA,IAAGA,CAAC,CAACC,GAAG,KAAK,OAAO,EAAC;QAAS;QAC5B,IAAGD,CAAC,CAACC,GAAG,KAAK,OAAO,EAAC;UACnB;UACAN,YAAY,CAACC,OAAO,IAAII,CAAC,CAACC,GAAG;QAE/B,CAAC,MAAI;UACH;UACAH,OAAO,CAACH,YAAY,CAACC,OAAO,CAAC;UAC9B;UACCD,YAAY,CAACC,OAAO,GAAG,EAAE;UACzBI,CAAC,CAACE,MAAM,CAACC,KAAK,GAAG,EAAE;QACrB;MAEF;IAEF,CAAC;IAEDC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAEN,aAAa,CAAC;IACjD,OAAO,MAAM;MACXK,MAAM,CAACE,mBAAmB,CAAC,SAAS,EAAEP,aAAa,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAER,oBAEET,OAAA,CAAAE,SAAA;IAAAe,QAAA,gBACEjB,OAAA,CAACN,GAAG;MAAAuB,QAAA,eAACjB,OAAA;QAAAiB,QAAA,GAAI,+DAA6D,EAAC,SAAS,EAAC,QAAM,eAAAjB,OAAA;UAAOkB,EAAE,EAAC,aAAa;UAACC,IAAI,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAEZvB,OAAA,CAACF,WAAW;MAACe,KAAK,EAAEN;IAAK;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA,eAC7B,CAAC;AAEP,CAAC;AAACnB,EAAA,CA1CID,QAAQ;AAAAqB,EAAA,GAARrB,QAAQ;AA2Cd,eAAeA,QAAQ;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}